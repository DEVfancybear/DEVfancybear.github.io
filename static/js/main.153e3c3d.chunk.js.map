{"version":3,"sources":["Quiz.js","NextQuestion.js","FinishedQuiz.js","App.js","serviceWorker.js","index.js"],"names":["Quiz","result","this","props","quizData","filter","current","index","active","answerPickedVar","answerPicked","panelId","id","questions","answers","map","clickHandler","letter","pAnswer","correct","statusStyle","correctActive","wrongActive","key","onClick","className","answer","showStart","startQuiz","dsplQuiz","length","question","Component","NextQuestion","showFinish","fQuiz","loadNext","FinishedQuiz","completeTime","Math","round","testTime","floor","correctA","totalQuestions","restart","App","state","quizInfo","correctAnswers","displayQuiz","finishScreen","showStartBtn","startTime","pickAnswer","bind","loadNextQuestion","FinishQuiz","restartQuiz","answerBool","idNum","quizArrCopy","correctCopy","setState","copy","i","nDate","Date","now","totalTime","cur2","index2","hasOwnProperty","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAkDeA,G,uLAhDJ,IAAD,OACAC,EAASC,KAAKC,MAAMC,SAASC,OAAO,SAACC,EAAQC,GACjD,OAAuB,GAAhBD,EAAQE,SAEbC,EAAkBR,EAAO,GAAGS,aAC5BC,EAAUV,EAAO,GAAGW,GAElBC,EAAYZ,EAAO,GAAGa,QAAQC,IAAI,SAACT,EAAQC,GAC/C,IAIIS,EAJAC,EAAS,GACH,GAAPV,EAAUU,EAAO,IAAmB,GAAPV,EAAUU,EAAO,IAChC,GAAPV,EAAUU,EAAO,IAAmB,GAAPV,IAAUU,EAAO,KAGpC,GAAjBR,IACDO,EAAe,WAAK,EAAKb,MAAMe,QAAQZ,EAAQa,QAASR,EAASJ,KAEnE,IAAIa,EAAc,GAOlB,OAN0B,GAAvBd,EAAQe,cACTD,EAAc,iBACc,GAArBd,EAAQgB,cACfF,EAAc,gBAGT,wBAAIG,IAAKhB,EAAOiB,QAASR,EAAcS,UAAWL,GACjD,0BAAMK,UAAU,eAAeR,GAC/B,2BAAIX,EAAQoB,WAIpB,OAAyB,GAAtBxB,KAAKC,MAAMwB,UACP,4BAAQH,QAAStB,KAAKC,MAAMyB,UAAWH,UAAU,SAAjD,4CAGiB,GAArBvB,KAAKC,MAAM0B,SAEZ,6BACE,yBAAKJ,UAAU,iBACb,uBAAGA,UAAU,gBAAb,mBAAqCd,EAAQ,EAA7C,IAAiDT,KAAKC,MAAMC,SAAS0B,QACrE,uBAAGL,UAAU,iBAAiBxB,EAAO,GAAG8B,WAE1C,wBAAIN,UAAU,kBAAkBZ,IAGtB,S,GA5CDmB,cCqBJC,E,iLAnBb,IAAMhC,EAASC,KAAKC,MAAMC,SAASC,OAAO,SAACC,EAAQC,GAC/C,OAAuB,GAAhBD,EAAQE,SAGjB,OAA2B,GAAxBP,EAAO,GAAGS,aACRT,EAAO,GAAGW,IAAIV,KAAKC,MAAMC,SAAS0B,OAAO,EACd,GAAvB5B,KAAKC,MAAM+B,WACL,4BAAQV,QAAStB,KAAKC,MAAMgC,MAAOV,UAAU,SAA7C,oCACK,KAGT,4BAAQD,QAAStB,KAAKC,MAAMiC,SAAUX,UAAU,SAAhD,kCAGF,S,GAhBcO,aC0BZK,E,iLAxBX,GAAGnC,KAAKC,MAAM+B,WAAW,CACxB,IAAII,EAAeC,KAAKC,MAAMtC,KAAKC,MAAMsC,UACzC,GAAGH,EAAa,GACfA,GAA8B,gBACzB,GAAGA,GAAc,GAAG,CAGzBA,EAFcC,KAAKG,MAAMJ,EAAa,IAEb,YADXA,EAAa,GACsB,WAGnD,OACJ,6BACQ,uBAAGb,UAAU,kBAAb,0BACA,6CAAWvB,KAAKC,MAAMwC,SAAtB,UAAuCzC,KAAKC,MAAMyC,eAAlD,0CACA,gDAAYN,EAAZ,wDACA,4BAAQd,QAAStB,KAAKC,MAAM0C,SAA5B,sCAIF,OAAO,S,GArBcb,aC2GZc,E,YArGb,WAAY3C,GAAO,IAAD,8BAChB,4CAAMA,KAED4C,MAAQ,CAACC,SAAU,CAAC,CAACjB,SAAS,yHAA8DnB,GAAG,EAAGJ,QAAO,EAAMM,QAAQ,CAAC,CAACY,OAAO,8CAA4BP,SAAQ,GAAO,CAACO,OAAO,+CAA8BP,SAAQ,GAAQ,CAACO,OAAO,wDAAiCP,SAAQ,GAAQ,CAACO,OAAO,4CAA0BP,SAAQ,IAAST,cAAa,GACnW,CAACqB,SAAS,kJAA+EnB,GAAG,EAAGJ,QAAO,EAAOM,QAAQ,CAAC,CAACY,OAAO,kIAAmEP,SAAQ,GAAQ,CAACO,OAAO,mGAAiDP,SAAQ,GAAO,CAACO,OAAO,gGAA8CP,SAAQ,GAAQ,CAACO,OAAO,sGAAiDP,SAAQ,IAAST,cAAa,GACtb,CAACqB,SAAS,2IAAyEnB,GAAG,EAAGJ,QAAO,EAAOM,QAAQ,CAAC,CAACY,OAAO,mHAAqEP,SAAQ,GAAO,CAACO,OAAO,qFAA6CP,SAAQ,GAAQ,CAACO,OAAO,kFAA0CP,SAAQ,GAAQ,CAACO,OAAO,oGAAsDP,SAAQ,IAAST,cAAa,GAC/a,CAACqB,SAAS,oIAAoEnB,GAAG,EAAGJ,QAAO,EAAOM,QAAQ,CAAC,CAACY,OAAO,2DAA2BP,SAAQ,GAAQ,CAACO,OAAO,+DAAgCP,SAAQ,GAAQ,CAACO,OAAO,uDAAkCP,SAAQ,GAAO,CAACO,OAAO,wDAA6BP,SAAQ,IAAST,cAAa,IAE5UuC,eAAe,EACfC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,UAAU,EACVZ,SAAS,GAGX,EAAKa,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAK3B,UAAY,EAAKA,UAAU2B,KAAf,gBACjB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBApBH,E,wEAuBPI,EAAYC,EAAOrD,GAC5B,IAAIsD,EAAW,YAAO3D,KAAK6C,MAAMC,UAGjC,GAFAa,EAAYD,GAAOlD,cAAe,EAE/BiD,EAAW,CACZ,IAAIG,EAAc5D,KAAK6C,MAAME,eAC7Ba,IACAD,EAAYD,GAAO9C,QAAQP,GAAOc,eAAgB,EAElDnB,KAAK6D,SAAS,CAACd,eAAgBa,EAAad,SAAUa,SAEtDA,EAAYD,GAAO9C,QAAQP,GAAOe,aAAc,EAChDpB,KAAK6D,SAAS,CAACf,SAAUa,M,yCAQ3B,IADA,IAAIG,EAAI,YAAO9D,KAAK6C,MAAMC,UAClBiB,EAAE,EAAGA,EAAED,EAAKlC,OAAQmC,IAC1B,GAAmB,GAAhBD,EAAKC,GAAGzD,QAAgByD,IAAID,EAAKlC,OAAO,EAAE,CAC3CkC,EAAKC,GAAGzD,QAAS,EACjBwD,EAAKC,EAAE,GAAGzD,QAAS,EACnB,MAIJN,KAAK6D,SAAS,CAACf,SAAUgB,M,kCAKzB,IAAIE,EAAQC,KAAKC,MACjBlE,KAAK6D,SAAS,CAACb,aAAa,EAAME,cAAa,EAAOC,UAAUa,M,mCAIhE,IACIG,GADaF,KAAKC,MACMlE,KAAK6C,MAAMM,WAAW,IAClDnD,KAAK6D,SAAS,CAACb,aAAY,EAAOC,cAAa,EAAMV,SAAS4B,M,oCAI9D,IAAIR,EAAW,YAAO3D,KAAK6C,MAAMC,WACjCa,EAAcA,EAAY9C,IAAI,SAACT,EAAQC,GAYrC,OAXAD,EAAQI,cAAe,EACvBJ,EAAQQ,QAAUR,EAAQQ,QAAQC,IAAI,SAACuD,EAAMC,GAM3C,OALGD,EAAKE,eAAe,wBACdF,EAAKjD,cACLiD,EAAKE,eAAe,uBACpBF,EAAKhD,YAEPgD,IAGThE,EAAQE,QAAS,EACVF,KAGG,GAAGE,QAAS,EACxB,IAAI0D,EAAQC,KAAKC,MACjBlE,KAAK6D,SAAS,CAACb,aAAY,EAAMD,eAAe,EAAGE,cAAa,EAAOH,SAAUa,EAAaR,UAAUa,M,+BAMxG,OACA,yBAAKzC,UAAU,OACb,kBAAC,EAAD,CAAMrB,SAAUF,KAAK6C,MAAMC,SAAU9B,QAAShB,KAAKoD,WAAYzB,SAAU3B,KAAK6C,MAAMG,YAAatB,UAAa1B,KAAK0B,UAAWD,UAAWzB,KAAK6C,MAAMK,eACpJ,kBAAC,EAAD,CAAchB,SAAUlC,KAAKsD,iBAAkBpD,SAAYF,KAAK6C,MAAMC,SAAUb,MAAOjC,KAAKuD,WAAYvB,WAAYhC,KAAK6C,MAAMI,eAC/H,kBAAC,EAAD,CAAcjB,WAAYhC,KAAK6C,MAAMI,aAAcR,SAAUzC,KAAK6C,MAAME,eAAgBL,eAAgB1C,KAAK6C,MAAMC,SAASlB,OAAQe,QAAS3C,KAAKwD,YAAajB,SAAUvC,KAAK6C,MAAMN,gB,GAhGxKT,aCMEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.153e3c3d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Quiz extends Component{\n  render(){\n    const result = this.props.quizData.filter((current,index)=>{\n      return current.active==true;\n    });\n    var answerPickedVar = result[0].answerPicked;\n    var panelId = result[0].id;\n\n    const questions = result[0].answers.map((current,index)=>{\n      let letter = \"\" ;\n      if(index==0){letter='A'}else if(index==1){letter=\"B\"}\n        else if(index==2){letter=\"C\"}else if(index==3){letter=\"D\"};//correct letter for each answer\n      \n      let clickHandler;\n      if(answerPickedVar==false){//if answer wasnt picked yet on current panel\n        clickHandler = ()=>{this.props.pAnswer(current.correct, panelId, index)};\n      }\n      let statusStyle = \"\";\n      if(current.correctActive==true){\n        statusStyle = \"correct-answer\"\n      }else if(current.wrongActive==true){\n        statusStyle = \"wrong-answer\"\n      }\n\n      return <li key={index} onClick={clickHandler} className={statusStyle}>\n              <span className=\"question-id\">{letter}</span>\n              <p>{current.answer}</p>\n            </li>\n    })\n    \n      if(this.props.showStart==true){\n      return <button onClick={this.props.startQuiz} className=\"btn-1\" >Bắt đầu học tập</button>\n      }\n\n      if(this.props.dsplQuiz==true){\n    return(\n        <div>\n          <div className=\"question-wrap\">\n            <p className=\"question-num\">Câu hỏi {panelId+1}/{this.props.quizData.length}</p>\n            <p className=\"question-text\">{result[0].question}</p>\n          </div>\n          <ul className=\"questions-list\">{questions}</ul>\n        </div>\n      )\n      }else{ return null; }\n\n\n  }\n}\nexport default Quiz;","import React, { Component } from 'react';\nclass NextQuestion extends Component{\nrender(){\n  const result = this.props.quizData.filter((current,index)=>{\n      return current.active==true;\n  });\n\n    if(result[0].answerPicked==true){\n      if(result[0].id==this.props.quizData.length-1){//last question in array\n          if(this.props.showFinish==false){\n            return <button onClick={this.props.fQuiz} className=\"btn-1\" >Kết thúc bài tập</button>\n          }else{ return null;}\n        \n      }else{\n        return <button onClick={this.props.loadNext} className=\"btn-1\" >Câu hỏi tiếp theo</button>\n      }\n    }else{\n      return null; \n    }\n  }\n}\n\nexport default NextQuestion;","import React, { Component } from 'react';\nclass FinishedQuiz extends Component{\n  render(){\n    if(this.props.showFinish){\n     var completeTime = Math.round(this.props.testTime );\n     if(completeTime<60){\n      completeTime = completeTime + \" seconds\";\n     }else if(completeTime>=60){\n      let minutes = Math.floor(completeTime/60);\n      let seconds = completeTime%60;\n      completeTime = minutes + \" minutes \" + seconds + \" seconds\";\n     }\n\n    return(\n<div>\n        <p className=\"complete-title\" >Xin Chúc Mừng!</p>\n        <p>Bạn có {this.props.correctA} trong {this.props.totalQuestions} câu trả lời đúng</p>\n        <p>Bạn mất {completeTime} để hoàn thành bài kiểm tra.</p>\n        <button onClick={this.props.restart} >Khởi động lại</button>  \n</div>\n      )\n    }else{\n      return null;\n    }\n\n  }\n}\nexport default FinishedQuiz;","import React, { Component } from 'react';\nimport './App.css';\nimport Quiz from './Quiz';\nimport NextQuestion from './NextQuestion';\nimport FinishedQuiz from './FinishedQuiz';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {quizInfo: [{question:\"Năm 1945, các quốc gia Đông Nam Á nào giành được độc lập ?\", id:0, active:true, answers:[{answer:\"Việt Nam-Inđônêxia- Lào.\", correct:true}, {answer:\"Việt Nam –Lào – Campuchia.\", correct:false}, {answer:\"Inđônêxia –Mã Lai –Philippin.\", correct:false}, {answer:\"Thái Lan –Lào –Brunây.\", correct:false}], answerPicked:false},\n{question:'Pháp tiến hành khai thác thuộc địa lần hai ở Đông Dương trong hoàn cảnh nào', id:1, active:false, answers:[{answer:\"Pháp là nước thắng trận, thu nhiều lợi nhuận cần tìm thị trường\", correct:false}, {answer:'Pháp là nước thắng trận, bị tổn thất nặng nề.', correct:true}, {answer:'Pháp là nước bại trận, bị hậu quả nặng nề.', correct:false}, {answer:'Pháp là nước bại trận, phải đền bồi chiến phí', correct:false}], answerPicked:false},\n{question:\"Trong đợt khai thác lần hai, Pháp đẩy mạnh lập đồn điền cao su là vì:\", id:2, active:false, answers:[{answer:\"Cao su là nguyên liệu chủ yếu phục vụ cho công nghiệp chính quốc.\", correct:true}, {answer:\"Để phá vỡ kinh tế nông nghiệp ở Việt Nam.\", correct:false}, {answer:\"Ở Việt Nam có diện tích đất trồng lớn.\", correct:false}, {answer:\"Đem lại nhiều lợi nhuận cho Pháp và các nước khác.\", correct:false}], answerPicked:false},\n{question:'Trong ngành khai thác mỏ, để đẩy mạnh tiến độ khai thác Pháp đã:', id:3, active:false, answers:[{answer:'Đầu tư vốn và kỹ thuật.', correct:false}, {answer:'Tăng cường đàn áp công nhân.', correct:false}, {answer:'Bổ sung thêm vốn và nhân công.', correct:true}, {answer:'Tăng giờ làm, giảm lương.', correct:false}], answerPicked:false}\n],\n      correctAnswers:0,\n      displayQuiz: false,\n      finishScreen: false,\n      showStartBtn: true,\n      startTime:0,\n      testTime:0\n    }\n\n    this.pickAnswer = this.pickAnswer.bind(this);\n    this.loadNextQuestion = this.loadNextQuestion.bind(this);\n    this.startQuiz = this.startQuiz.bind(this);\n    this.FinishQuiz = this.FinishQuiz.bind(this);\n    this.restartQuiz = this.restartQuiz.bind(this);\n  }\n\n  pickAnswer(answerBool, idNum, index){\n    let quizArrCopy = [...this.state.quizInfo];\n    quizArrCopy[idNum].answerPicked = true;\n\n    if(answerBool){\n      let correctCopy = this.state.correctAnswers;\n      correctCopy++;\n      quizArrCopy[idNum].answers[index].correctActive = true;//set answer color to green if correct\n\n      this.setState({correctAnswers: correctCopy, quizInfo: quizArrCopy});\n    }else{\n      quizArrCopy[idNum].answers[index].wrongActive = true;\n      this.setState({quizInfo: quizArrCopy});\n    }\n\n  }\n\n  loadNextQuestion(){\n    //if activePicked is false, dont show button\n    let copy = [...this.state.quizInfo];\n    for(let i=0; i<copy.length; i++){\n      if(copy[i].active==true && i!==copy.length-1){\n        copy[i].active = false;\n        copy[i+1].active = true;\n        break;\n      }\n    }\n\n    this.setState({quizInfo: copy});\n  }\n\n  startQuiz(){\n    //start timer\n    var nDate = Date.now();\n    this.setState({displayQuiz: true, showStartBtn:false, startTime:nDate});\n  }\n\n  FinishQuiz(){\n    let finishTime = Date.now();\n    let totalTime = (finishTime-this.state.startTime)/1000;\n    this.setState({displayQuiz:false, finishScreen:true, testTime:totalTime});\n  }\n\n  restartQuiz(){\n    let quizArrCopy = [...this.state.quizInfo];\n    quizArrCopy = quizArrCopy.map((current,index)=>{\n      current.answerPicked = false;\n      current.answers = current.answers.map((cur2, index2)=>{\n        if(cur2.hasOwnProperty('correctActive')){\n          delete cur2.correctActive;\n        }else if(cur2.hasOwnProperty('wrongActive')){\n          delete cur2.wrongActive;\n        }\n        return cur2;\n      })\n\n      current.active = false;\n      return current;\n    });\n\n    quizArrCopy[0].active = true;\n    var nDate = Date.now();\n    this.setState({displayQuiz:true, correctAnswers:0, finishScreen:false, quizInfo: quizArrCopy, startTime:nDate});\n    //start timer\n  }\n\n\n  render(){\n    return (\n    <div className=\"App\">\n      <Quiz quizData={this.state.quizInfo} pAnswer={this.pickAnswer} dsplQuiz={this.state.displayQuiz} startQuiz = {this.startQuiz} showStart={this.state.showStartBtn} />\n      <NextQuestion loadNext={this.loadNextQuestion} quizData = {this.state.quizInfo} fQuiz={this.FinishQuiz} showFinish={this.state.finishScreen} />\n      <FinishedQuiz showFinish={this.state.finishScreen} correctA={this.state.correctAnswers} totalQuestions={this.state.quizInfo.length} restart={this.restartQuiz} testTime={this.state.testTime} />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}